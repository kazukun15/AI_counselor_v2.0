import streamlit as st
import requests
import re
import random
import time
import base64
from io import BytesIO
from PIL import Image
from streamlit_chat import message  # pip install streamlit-chat

# ------------------------------------------------------------------
# „Éö„Éº„Ç∏Ë®≠ÂÆö
# ------------------------------------------------------------------
st.set_page_config(page_title="„É°„É≥„Çø„É´„Ç±„Ç¢„Éú„ÉÉ„Éà", layout="wide")
st.title("„É°„É≥„Çø„É´„Ç±„Ç¢„Éú„ÉÉ„Éà V3.0")

# ------------------------------------------------------------------
# „ÉÜ„Éº„ÉûË®≠ÂÆö (config.toml Ë™≠„ÅøËæº„Åø)
# ------------------------------------------------------------------
try:
    try:
        import tomllib  # Python 3.11‰ª•Èôç
    except ImportError:
        import toml as tomllib
    with open("config.toml", "rb") as f:
        config = tomllib.load(f)
    theme_config = config.get("theme", {})
    primaryColor = theme_config.get("primaryColor", "#729075")
    backgroundColor = theme_config.get("backgroundColor", "#f1ece3")
    secondaryBackgroundColor = theme_config.get("secondaryBackgroundColor", "#fff8ef")
    textColor = theme_config.get("textColor", "#5e796a")
    font = theme_config.get("font", "monospace")
except Exception:
    primaryColor = "#729075"
    backgroundColor = "#f1ece3"
    secondaryBackgroundColor = "#fff8ef"
    textColor = "#5e796a"
    font = "monospace"

# ------------------------------------------------------------------
# ËÉåÊôØ„ÉªÂÖ±ÈÄö„Çπ„Çø„Ç§„É´
# ------------------------------------------------------------------
st.markdown(f"""
<style>
body {{
    background-color: {backgroundColor};
    font-family: {font}, sans-serif;
    color: {textColor};
}}
.chat-container {{
    max-height: 600px;
    overflow-y: auto;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin-bottom: 20px;
    background-color: {secondaryBackgroundColor};
}}
.chat-bubble {{
    background-color: #d4f7dc;
    border-radius: 10px;
    padding: 8px;
    display: inline-block;
    max-width: 80%;
    word-wrap: break-word;
    white-space: pre-wrap;
    margin: 4px 0;
}}
.chat-header {{
    font-weight: bold;
    margin-bottom: 4px;
    color: {primaryColor};
}}
.fixed-input {{
    position: fixed;
    bottom: 0;
    width: 100%;
    background: #FFF;
    padding: 10px;
    box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
    z-index: 100;
}}
</style>
""", unsafe_allow_html=True)

# ------------------------------------------------------------------
# „Çª„ÉÉ„Ç∑„Éß„É≥„Çπ„ÉÜ„Éº„ÉàÂàùÊúüÂåñ
# ------------------------------------------------------------------
if "conversation_turns" not in st.session_state:
    st.session_state["conversation_turns"] = []
if "messages" not in st.session_state:
    st.session_state.messages = []
if "show_selection_form" not in st.session_state:
    st.session_state["show_selection_form"] = False

# ------------------------------------------------------------------
# „Çµ„Ç§„Éâ„Éê„ÉºÔºö„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÔºèÁõ∏Ë´á„Çø„Ç§„ÉóÔºè„É¨„Éù„Éº„ÉàÔºèÁ∂ö„Åç„Éú„Çø„É≥
# ------------------------------------------------------------------
with st.sidebar:
    st.header("„É¶„Éº„Ç∂„ÉºË®≠ÂÆö")
    st.session_state["user_name"] = st.text_input("„ÅÇ„Å™„Åü„ÅÆÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ", value="ÊÑõÂ™õÁúåÂ∫ÅËÅ∑Âì°", key="sidebar_user_name")
    st.session_state["consult_type"] = st.radio("Áõ∏Ë´á„Çø„Ç§„Éó„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ", 
                                               ("Êú¨‰∫∫„ÅÆÁõ∏Ë´á", "‰ªñËÄÖ„ÅÆÁõ∏Ë´á", "„Éá„É™„Ç±„Éº„Éà„Å™Áõ∏Ë´á"), key="sidebar_consult_type")

    st.header("Ê©üËÉΩ")
    if st.button("ÊîπÂñÑÁ≠ñ„ÅÆ„É¨„Éù„Éº„Éà", key="report_sidebar"):
        if st.session_state.get("conversation_turns", []):
            all_turns = "\n".join([
                f"„ÅÇ„Å™„Åü: {turn['user']}\nÂõûÁ≠î: {turn['answer']}"
                for turn in st.session_state["conversation_turns"]
            ])
            summary = generate_summary(all_turns)
            st.session_state["summary"] = summary
            st.markdown("**„Åæ„Å®„ÇÅ:**\n" + summary)
        else:
            st.warning("„Åæ„Åö„ÅØ‰ºöË©±„ÇíÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")

    if st.button("Á∂ö„Åç„ÇíË™≠„ÅøËæº„ÇÄ", key="continue_sidebar"):
        if st.session_state.get("conversation_turns", []):
            context = "\n".join([
                f"„ÅÇ„Å™„Åü: {turn['user']}\nÂõûÁ≠î: {turn['answer']}"
                for turn in st.session_state["conversation_turns"]
            ])
            new_answer = None
            new_answer = continue_discussion("Á∂ö„Åç„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ", context)
            st.session_state["conversation_turns"].append({"user": "Á∂ö„Åç", "answer": new_answer})
            st.experimental_rerun()
        else:
            st.warning("‰ºöË©±„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")

    if st.button("ÈÅ∏ÊäûÂºèÁõ∏Ë´á„Éï„Ç©„Éº„É†„ÇíÈñã„Åè", key="open_form"):
        st.session_state["show_selection_form"] = True

# ------------------------------------------------------------------
# ÈÅ∏ÊäûÂºèÁõ∏Ë´á„Éï„Ç©„Éº„É†ÔºÜÈÅéÂéª„ÅÆ‰ºöË©±Â±•Ê≠¥
# ------------------------------------------------------------------
if st.session_state["show_selection_form"]:
    with st.sidebar:
        st.header("ÈÅ∏ÊäûÂºèÁõ∏Ë´á„Éï„Ç©„Éº„É†")
        category = st.selectbox("ÊÇ©„Åø„ÅÆÁ®ÆÈ°û", ["‰∫∫ÈñìÈñ¢‰øÇ", "‰ªï‰∫ã", "ÂÆ∂Â∫≠", "ÁµåÊ∏à", "ÂÅ•Â∫∑", "„Åù„ÅÆ‰ªñ"], key="category_form")
        st.subheader("Ë∫´‰Ωì„ÅÆÁä∂ÊÖã")
        physical_status = st.radio("Ë∫´‰Ωì„ÅÆÁä∂ÊÖã", ["ËâØÂ•Ω", "ÊôÆÈÄö", "‰∏çË™ø"], key="physical_form")
        physical_detail = st.text_area("Ë∫´‰Ωì„ÅÆÁä∂ÊÖã„ÅÆË©≥Á¥∞", key="physical_detail_form", placeholder="ÂÖ∑‰ΩìÁöÑ„Å™ÁóáÁä∂„ÇÑÂ§âÂåñ")
        physical_duration = st.selectbox("Ë∫´‰Ωì„ÅÆÁóáÁä∂„ÅÆÊåÅÁ∂öÊúüÈñì", ["Êï∞Êó•", "1ÈÄ±Èñì", "1„É∂Êúà‰ª•‰∏ä", "‰∏çÊòé"], key="physical_duration_form")

        st.subheader("ÂøÉ„ÅÆÁä∂ÊÖã")
        mental_status = st.radio("ÂøÉ„ÅÆÁä∂ÊÖã", ["ËêΩ„Å°ÁùÄ„ÅÑ„Å¶„ÅÑ„Çã", "„ÇÑ„ÇÑ‰∏çÂÆâ", "„Å®„Å¶„ÇÇ‰∏çÂÆâ"], key="mental_form")
        mental_detail = st.text_area("ÂøÉ„ÅÆÁä∂ÊÖã„ÅÆË©≥Á¥∞", key="mental_detail_form", placeholder="ÊÑü„Åò„Çã‰∏çÂÆâ„ÇÑ„Çπ„Éà„É¨„Çπ")
        mental_duration = st.selectbox("ÂøÉ„ÅÆÁóáÁä∂„ÅÆÊåÅÁ∂öÊúüÈñì", ["Êï∞Êó•", "1ÈÄ±Èñì", "1„É∂Êúà‰ª•‰∏ä", "‰∏çÊòé"], key="mental_duration_form")

        stress_level = st.slider("„Çπ„Éà„É¨„Çπ„É¨„Éô„É´ (1-10)", 1, 10, 5, key="stress_form")
        recent_events = st.text_area("ÊúÄËøë„ÅÆÂ§ß„Åç„Å™Âá∫Êù•‰∫ãÔºà‰ªªÊÑèÔºâ", key="events_form")
        treatment_history = st.radio("ÈÄöÈô¢Ê≠¥„Åå„ÅÇ„Çä„Åæ„Åô„ÅãÔºü", ["„ÅØ„ÅÑ", "„ÅÑ„ÅÑ„Åà"], key="treatment_form")
        ongoing_treatment = ""
        if treatment_history == "„ÅØ„ÅÑ":
            ongoing_treatment = st.radio("ÁèæÂú®„ÇÇÈÄöÈô¢‰∏≠„Åß„Åô„ÅãÔºü", ["„ÅØ„ÅÑ", "„ÅÑ„ÅÑ„Åà"], key="ongoing_form")

        if st.button("ÈÅ∏ÊäûÂÜÖÂÆπ„ÇíÈÄÅ‰ø°", key="submit_selection"):
            selection_summary = (
                f"„ÄêÈÅ∏ÊäûÂºèÁõ∏Ë´á„Éï„Ç©„Éº„É†„Äë\n"
                f"ÊÇ©„Åø„ÅÆÁ®ÆÈ°û: {category}\n"
                f"Ë∫´‰Ωì„ÅÆÁä∂ÊÖã: {physical_status}\n"
                f"Ë∫´‰Ωì„ÅÆË©≥Á¥∞: {physical_detail}\n"
                f"Ë∫´‰Ωì„ÅÆÁóáÁä∂„ÅÆÊåÅÁ∂öÊúüÈñì: {physical_duration}\n"
                f"ÂøÉ„ÅÆÁä∂ÊÖã: {mental_status}\n"
                f"ÂøÉ„ÅÆË©≥Á¥∞: {mental_detail}\n"
                f"ÂøÉ„ÅÆÁóáÁä∂„ÅÆÊåÅÁ∂öÊúüÈñì: {mental_duration}\n"
                f"„Çπ„Éà„É¨„Çπ„É¨„Éô„É´: {stress_level}\n"
                f"ÊúÄËøë„ÅÆÂá∫Êù•‰∫ã: {recent_events}\n"
                f"ÈÄöÈô¢Ê≠¥: {treatment_history}\n"
            )
            if treatment_history == "„ÅØ„ÅÑ":
                selection_summary += f"ÁèæÂú®„ÅÆÈÄöÈô¢Áä∂Ê≥Å: {ongoing_treatment}\n"
            st.session_state["conversation_turns"].append({
                "user": selection_summary, 
                "answer": "ÈÅ∏ÊäûÂºèÁõ∏Ë´á„Éï„Ç©„Éº„É†„ÅÆÂÜÖÂÆπ„ÅåÈÄÅ‰ø°„Åï„Çå„ÄÅÂèçÊò†„Åï„Çå„Åæ„Åó„Åü„ÄÇ"
            })
            st.success("ÈÄÅ‰ø°„Åó„Åæ„Åó„ÅüÔºÅ")

        st.header("ÈÅéÂéª„ÅÆ‰ºöË©±")
        if st.session_state.get("conversation_turns", []):
            for turn in st.session_state["conversation_turns"]:
                st.markdown(f"**„ÅÇ„Å™„Åü:** {turn['user'][:50]}...")
                st.markdown(f"**ÂõûÁ≠î:** {turn['answer'][:50]}...")
        else:
            st.info("„Åæ„Å†‰ºöË©±„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")

# ------------------------------------------------------------------
# „Ç≠„É£„É©„ÇØ„Çø„ÉºÂÆöÁæ©
# ------------------------------------------------------------------
EXPERTS = ["Á≤æÁ•ûÁßëÂåªÂ∏´", "„Ç´„Ç¶„É≥„Çª„É©„Éº", "„É°„É≥„Çø„É™„Çπ„Éà", "ÂÜÖÁßëÂåª"]

# ------------------------------------------------------------------
# ÁîªÂÉèË™≠„ÅøËæº„Åø
# ------------------------------------------------------------------
try:
    img_psychiatrist = Image.open("avatars/Psychiatrist.png")
    img_counselor = Image.open("avatars/counselor.png")
    img_mentalist = Image.open("avatars/MENTALIST.png")
    img_doctor = Image.open("avatars/doctor.png")
except Exception as e:
    st.error(f"ÁîªÂÉèË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}")
    img_psychiatrist = "üß†"
    img_counselor = "üë•"
    img_mentalist = "üí°"
    img_doctor = "üíä"

avatar_img_dict = {
    "user": "üë§",
    "Á≤æÁ•ûÁßëÂåªÂ∏´": img_psychiatrist,
    "„Ç´„Ç¶„É≥„Çª„É©„Éº": img_counselor,
    "„É°„É≥„Çø„É™„Çπ„Éà": img_mentalist,
    "ÂÜÖÁßëÂåª": img_doctor,
    "assistant": "ü§ñ",
}

def get_image_base64(image):
    if isinstance(image, str):
        return image
    buffered = BytesIO()
    image.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode()

# ------------------------------------------------------------------
# Gemini API Èñ¢Êï∞
# ------------------------------------------------------------------
def remove_json_artifacts(text: str) -> str:
    if not isinstance(text, str):
        text = str(text) if text else ""
    pattern = r"'parts': \[\{'text':.*?\}\], 'role': 'model'"
    return re.sub(pattern, "", text, flags=re.DOTALL).strip()

def call_gemini_api(prompt: str) -> str:
    # „Åì„Åì„Å´Google Gemini APIÂëº„Å≥Âá∫„ÅóÂá¶ÁêÜ
    url = f"https://generativelanguage.googleapis.com/v1beta/models/{st.secrets['general']['api_key']}:generateContent?key=..."
    # ÁúÅÁï•ÔºàÂÆüË£Ö‰æãÔºâ
    return "ÔºàAI„Åã„Çâ„ÅÆÂõûÁ≠î„ÅåÂÖ•„Çä„Åæ„ÅôÔºâ"

def analyze_question(question: str) -> int:
    score = 0
    keywords_emotional = ["Âõ∞„Å£„Åü", "ÊÇ©„Åø", "Ëã¶„Åó„ÅÑ", "Ëæõ„ÅÑ"]
    keywords_logical = ["ÁêÜÁî±", "ÂéüÂõ†", "‰ªïÁµÑ„Åø", "ÊñπÊ≥ï"]
    for word in keywords_emotional:
        if re.search(word, question):
            score += 1
    for word in keywords_logical:
        if re.search(word, question):
            score -= 1
    return score

def adjust_parameters(question: str) -> dict:
    # ÁúÅÁï•ÔºàÂ∞ÇÈñÄÂÆ∂„ÅÆ„Çπ„Çø„Ç§„É´Ë®≠ÂÆöÔºâ
    return {}

def generate_expert_answers(question: str) -> str:
    # ÁúÅÁï•ÔºàÂàùÂõûÂõûÁ≠îÁî®Ôºâ
    return "(ÂàùÂõûÂõûÁ≠î) AI„ÅÆÂ∞ÇÈñÄÂÆ∂4‰∫∫„ÅåÂõûÁ≠î„Åó„Åæ„Åô„ÄÇ"

def continue_discussion(additional_input: str, current_turns: str) -> str:
    # ÁúÅÁï•ÔºàÁ∂ôÁ∂öÂõûÁ≠îÁî®Ôºâ
    return "(ËøΩÂä†ÂõûÁ≠î) „Åï„Çâ„Å´‰ºöË©±„ÇíÁ∂ö„Åë„Åæ„Åô„ÄÇ"

def generate_summary(discussion: str) -> str:
    return "(‰ºöË©±ÂÜÖÂÆπ„Çí„Åæ„Å®„ÇÅ„Åü„É¨„Éù„Éº„Éà)"

# ------------------------------------------------------------------
# ‰ºöË©±Â±•Ê≠¥„ÅÆË°®Á§∫Èñ¢Êï∞
# ------------------------------------------------------------------
def display_chat():
    # ÁúÅÁï•
    pass

def typewriter_bubble(sender: str, full_text: str, align: str, delay: float = 0.05):
    # ÁúÅÁï•
    pass

# ------------------------------------------------------------------
# ‰∏äÈÉ®ÔºöÂ∞ÇÈñÄÂÆ∂‰∏ÄË¶ß
# ------------------------------------------------------------------
st.markdown("### Â∞ÇÈñÄÂÆ∂‰∏ÄË¶ß")
cols = st.columns(len(EXPERTS))
for idx, expert in enumerate(EXPERTS):
    with cols[idx]:
        st.markdown(f"**{expert}**")
        if expert in avatar_img_dict and not isinstance(avatar_img_dict[expert], str):
            st.image(avatar_img_dict[expert], width=60)
        else:
            st.markdown("ü§ñ")

# ------------------------------------------------------------------
# „É°„Ç§„É≥„Ç®„É™„Ç¢Ôºö„ÉÅ„É£„ÉÉ„ÉàË°®Á§∫È†òÂüü
# ------------------------------------------------------------------
conversation_container = st.empty()

# ------------------------------------------------------------------
# ‰∏ãÈÉ®ÔºöLINEÈ¢®„ÉÅ„É£„ÉÉ„Éà„Éê„ÉºÔºà„ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ + ‚û§ „Éú„Çø„É≥Ôºâ
# ------------------------------------------------------------------
with st.container():
    st.markdown('<div class="fixed-input">', unsafe_allow_html=True)
    with st.form("chat_form", clear_on_submit=True):
        user_message = st.text_area("", placeholder="Your message", height=50, key="user_message_input")
        arrow_button = st.form_submit_button("‚û§", key="arrow_button")
    st.markdown("</div>", unsafe_allow_html=True)

    if arrow_button:
        if user_message.strip():
            if "conversation_turns" not in st.session_state:
                st.session_state["conversation_turns"] = []
            user_text = user_message

            if len(st.session_state["conversation_turns"]) == 0:
                # ÂàùÂõûÂõûÁ≠î
                answer_text = generate_expert_answers(user_text)
            else:
                # Á∂ôÁ∂öÂõûÁ≠î
                context = "\n".join([
                    f"„ÅÇ„Å™„Åü: {turn['user']}\nÂõûÁ≠î: {turn['answer']}"
                    for turn in st.session_state["conversation_turns"]
                ])
                answer_text = continue_discussion(user_text, context)

            st.session_state["conversation_turns"].append({"user": user_text, "answer": answer_text})

            # „Åì„Åì„Åß‰ºöË©±„ÇíË°®Á§∫ÔºàÂÆüË£Ö‰æãÔºâ
            conversation_container.markdown("")
            message(user_text, is_user=True)
            # „Çø„Ç§„Éó„É©„Ç§„Çø„ÉºÈ¢®„Å´ÂõûÁ≠î„ÇíË°®Á§∫„Åô„Çã„Å™„Çâ:
            # typewriter_bubble("ÂõûÁ≠î", answer_text, "left")
            # „ÅÇ„Çã„ÅÑ„ÅØ‰∏ÄÊã¨Ë°®Á§∫
            message(answer_text, is_user=False)
        else:
            st.warning("Áô∫Ë®Ä„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
